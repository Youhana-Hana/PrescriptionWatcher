<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="test">
    <property environment="env"/>
    <property name="emma" value="/usr/dev/android-sdk-linux/tools/lib/emma.jar" />
    <property name="emma.ant" value="/usr/dev/android-sdk-linux/tools/lib/emma_ant.jar" />
    <property name="src.location" value="../src"/>
    <property name="junit.output.dir" value="../tests/junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <path id="android.classpath">
        <pathelement location="/usr/dev/android-sdk-linux/platforms/android-17/android.jar"/>
    </path>
    <path id="emma.lib" >
        <pathelement location="${emma}" />
        <pathelement location="${emma.ant}" />
    </path>
    <path id="src.classpath">
        <pathelement location="${src.location}/bin/classes"/>
        <path refid="android.classpath"/>
    </path>
    <path id="test.classpath">
        <fileset dir="./libs" includes="*.jar"/>
        <fileset dir="../src/libs" includes="*.jar"/>
        <pathelement location="bin"/>
        <path refid="src.classpath"/>
        <path refid="emma.lib"/>
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
    <taskdef name="emmacheck" classname="org.emmacheck.EmmaCheckTask"
             classpath="./libs/emmacheck-0.2.jar"/>

    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="clean">
        <delete dir="bin"/>
    </target>

    <target name="cleanall" depends="clean">
        <ant antfile="build.xml" dir="${src.location}" inheritAll="false" target="clean"/>
    </target>

    <target depends="build-subprojects, build-project" name="build"/>

    <target name="build-subprojects">
        <ant antfile="build.xml" dir="${src.location}" inheritAll="false" target="release">
            <propertyset>
                <propertyref name="build.compiler"/>
            </propertyset>
        </ant>
    </target>

    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includeantruntime="false">
            <src path="src"/>
            <classpath refid="test.classpath"/>
        </javac>
    </target>

    <target name="test">
        <property name="filemask" value="**/Given*.java"/>

        <delete dir="${junit.output.dir}" />
        <mkdir dir="${junit.output.dir}" />

        <emma enabled="true">
            <instr instrpath="${src.location}/bin/classes" destdir="${junit.output.dir}" metadatafile="${junit.output.dir}/metadata.emma" mode="overwrite" merge="true">
                <filter excludes="com.MobiSeeker.PrescriptionWatcher,*.R,*.R$$*,*.Manifest,*.Manifest$$*,com.MobiSeeker.PrescriptionWatcher.BuildConfig" />
            </instr>
        </emma>

        <junit dir="${src.location}" fork="yes" forkmode="once" printsummary="withOutAndErr" failureproperty="junit.failure" errorproperty="junit.error" haltonfailure="false">
            <jvmarg value="-Demma.coverage.out.file=${junit.output.dir}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />
            <formatter type="xml"/>
            <classpath refid="test.classpath"/>
            <batchtest todir="${junit.output.dir}">
                <fileset dir="src" includes="${filemask}" />
            </batchtest>
        </junit>

        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>

        <emma enabled="true">
            <report >
                <sourcepath>
                    <pathelement path="${src.location}/src" />
                </sourcepath>
                <infileset dir="${junit.output.dir}" includes="*.emma" />
                <txt outfile="${junit.output.dir}/coverage.txt"/>
                <xml outfile="${junit.output.dir}/coverage.xml"/>
                <html outfile="${junit.output.dir}/coverage.html"/>
            </report>
        </emma>

        <loadfile srcfile="${junit.output.dir}/coverage.txt" property="coverage-text" />
        <echo message="${coverage-text}" />

        <fail if="junit.error" message="Tests had errors."/>
        <fail if="junit.failure" message="Tests had failures."/>

        <antcall target="enforce.coverage" />

    </target>

    <target name="enforce.coverage">
        <echo message="Checking 100% line coverage" />
        <emmacheck coveragefile="${junit.output.dir}/coverage.emma"
                   metadatafile="${junit.output.dir}/metadata.emma"
                   output="${junit.output.dir}/requiredcoverage.line.out"
                   overallcoverage="L100" />
    </target>

    <target name="test-with-build" depends="cleanall, build, test" />

</project>
